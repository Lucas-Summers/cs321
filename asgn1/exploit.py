from urllib.parse import quote
from Crypto.Random import get_random_bytes
import cipher

KEY = get_random_bytes(16)

def submit(user_input):
    prefix = "userid=456;userdata="
    suffix = ";session-id=31337"

    user_input = quote(user_input) # url encode input
    full_string = (prefix + user_input + suffix).encode()
    ciphertext = cipher.encrypt_aes(KEY, full_string, 'cbc')
    return ciphertext

def verify(encrypted_str):
    plaintext = cipher.decrypt_aes(KEY, encrypted_str, 'cbc').decode()
    print(plaintext)    
    return ";admin=true;" in plaintext

def exploit():
    """
    Exploits the CBC bit-flipping vulnerability to inject ";admin=true;".
    """
    # Step 1: Submit controlled input
    user_input = "A" * 16  # Padding to align blocks
    ciphertext = submit(user_input)
    
    # Step 2: Modify the ciphertext
    block_size = 16
    target_string = ";admin=true;"  # The string we want to inject
    
    # XOR target string with existing plaintext and ciphertext block
    prefix = "userid=456;userd".encode()
    target_xor = bytes(a ^ b for a, b in zip(target_string.encode(), prefix))
    
    # Modify the second block of ciphertext
    ciphertext = bytearray(ciphertext)
    for i in range(len(target_xor)):
        ciphertext[block_size + i] ^= target_xor[i]
    
    # Step 3: Submit modified ciphertext to verify()
    return verify(bytes(ciphertext))

if __name__ == "__main__":
    # Encrypt and decrypt normally
    print("Testing normal encryption:")
    ct = submit("Hello;admin=true;")
    print("Is admin true (normal):", verify(ct))




